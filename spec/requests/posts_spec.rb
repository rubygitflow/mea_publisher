# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/posts', type: :request do
  let(:person) do
    Person.create!(
      name: 'Kraft',
      nickname: Faker::Internet.unique.username(specifier: 8),
      email: Faker::Internet.email,
      password: '12345678'
    )
  end
  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: 'message',
      person_id: person.id,
      body: 'qwerty'
    }
  end

  let(:invalid_attributes) do
    {
      title: 'issue',
      person_id: person.id,
      body: ''
    }
  end

  before do
    params = {
      session: {
        email: person[:email],
        password: '12345678'
      }
    }
    do_request(:post, session_path, params)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      post = Post.new(valid_attributes)
      post.current_user = person
      post.save

      get posts_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      post = Post.new(valid_attributes)
      post.current_user = person
      post.save

      get post_url(post)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_post_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      post = Post.new(valid_attributes)
      post.current_user = person
      post.save

      get edit_post_url(post)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Post' do
        expect do
          post posts_url, params: { post: valid_attributes }
        end.to change(Post, :count).by(1)
      end

      it 'redirects to the created post' do
        post posts_url, params: { post: valid_attributes }
        expect(response).to redirect_to(post_url(Post.last))
      end

      it 'creates a new Hystory' do
        expect do
          post posts_url, params: { post: valid_attributes }
        end.to change(Hystory, :count).by(1)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Post' do
        expect do
          post posts_url, params: { post: invalid_attributes }
        end.to change(Post, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post posts_url, params: { post: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'article',
          person_id: person.id,
          body: 'new qwerty'
        }
      end

      it 'updates the requested post' do
        post = Post.new(valid_attributes)
        post.current_user = person
        post.save

        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(post.body).to eq(new_attributes[:body])
      end

      it 'redirects to the post' do
        post = Post.new(valid_attributes)
        post.current_user = person
        post.save

        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(response).to redirect_to(post_url(post))
      end

      it 'creates a new Hystory after updating the post' do
        post = Post.new(valid_attributes)
        post.current_user = person
        post.save

        expect do
          patch post_url(post), params: { post: new_attributes }
        end.to change(Hystory, :count).by(1)
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        post = Post.new(valid_attributes)
        post.current_user = person
        post.save

        patch post_url(post), params: { post: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it 'does not create a new Hystory without updating the post' do
        post = Post.new(valid_attributes)
        post.current_user = person
        post.save

        expect do
          patch post_url(post), params: { post: invalid_attributes }
        end.to change(Hystory, :count).by(0)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested post' do
      post = Post.new(valid_attributes)
      post.current_user = person
      post.save

      expect do
        delete post_url(post)
      end.to change(Post, :count).by(-1)
    end

    it 'redirects to the posts list' do
      post = Post.new(valid_attributes)
      post.current_user = person
      post.save

      delete post_url(post)
      expect(response).to redirect_to(posts_url)
    end

    it 'creates a new Hystory after destroying the post' do
      post = Post.new(valid_attributes)
      post.current_user = person
      post.save

      expect do
        delete post_url(post)
      end.to change(Hystory, :count).by(1)
    end
  end
end
